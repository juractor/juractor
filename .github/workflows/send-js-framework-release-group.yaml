name: Send JS Framework Release Group

on:
  schedule:
    - cron: '0 * * * *' # setiap 1 jam
  workflow_dispatch:

jobs:
  check_release:
    runs-on: ubuntu-latest

    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN_JS_FRAMEWORK_ANNOUNCEMENT }}
      TELEGRAM_CHAT_ID: '-1002557349745' # Group King JS Enthusiast
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Restore last releases cache
        id: cache
        uses: actions/cache@v4
        with:
          path: .github/cache/last-releases.json
          key: last-releases-cache-v1_3-${{ github.run_id }}
          restore-keys: |
            last-releases-cache-v1_2-

      - name: Fetch and notify random repo release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const repos = [
              'facebook/react',
              'vercel/next.js',
              'vuejs/core',
              'nuxt/nuxt',
              'sveltejs/svelte',
              'sveltejs/svelte',
              'withastro/astro',
            ];

            const filePath = '.github/cache/last-releases.json';
            let lastReleases = {};

            if (fs.existsSync(filePath)) {
              try {
                lastReleases = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
              } catch {
                lastReleases = {};
              }
            }

            // Ambil satu repo secara acak
            const repo = repos[Math.floor(Math.random() * repos.length)];
            const [owner, repoName] = repo.split('/');

            try {
              let latestCommit = ''
              let latestTag = null;
              let latestRelease = null;
              let releaseBody = '';
              let isTagFromCommit = false;

              try {
                latestRelease = await github.rest.repos.getLatestRelease({ owner, repo: repoName });
                latestTag = latestRelease.data.tag_name;
                releaseBody = latestRelease.data.body || '';
              } catch (err) {
                latestCommit = await github.rest.repos.listCommits({ owner, repo: repoName, per_page: 1 });
                releaseBody = latestCommit.data[0].commit.message;
              }
              
              if (latestRelease) {
                const lastTag = lastReleases[repo];

                if (latestTag !== lastTag) {
                  const originalText = `üì¢ ${latestRelease.data}`.trim();
  
                  // Kirim originalText ke Gemini untuk diproses (rapikan / jelaskan)
                  const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;
                  const geminiBody = {
                    contents: [
                      {
                        parts: [
                          {
                            text: `Rapikan dan tidak perlu menggunakan markdown (jangan gunakan tanda bintang, bold, italic, heading, dsb). Hasil akhir harus berisi:
                    1. Fitur yang ditambah
                    2. Bug yang di fix apa
                    3. Rapikan dan tolong keluarkan hasil dalam format teks polos, tanpa markdown, tanpa tanda *
                    4. Kalo tidak ada informasi kasih tidak ada
                    5. Kalo ketemu prefix convensional commit ganti pake emoji contoh fix: jadi üêõ
                    6. Tambahkan link release tag dan repository nya
                    7. Gausah kasih saran apapun, langsung intinya karna ini broadcast
                    8. Repo nya sesuai ${repo}
                    
                    Contoh output yang diinginkan:
                    
                    üì¢ Update tersedia untuk JS Framework: *${repo}* ‚Äì versi **${latestTag}** telah dirilis!
  
                    üìã Catatan Rilis:
                    ${releaseBody}
                    
                    üîó Lihat selengkapnya: https://github.com/${repo}/releases/tag/${latestTag}:\n\n${originalText}`
                          }
                        ]
                      }
                    ]
                  };
    
                  const geminiRes = await fetch(geminiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(geminiBody)
                  });
    
                  if (!geminiRes.ok) {
                    const geminiErr = await geminiRes.text();
                    throw new Error('Gemini API error: ' + geminiErr);
                  }
    
                  const geminiData = await geminiRes.json();
    
                  // Ambil hasil teks olahan dari Gemini API (sesuaikan struktur response-nya)
                  // Saya asumsikan di geminiData.contents[0].parts[0].text
                  const processedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || "Maaf, tidak ada hasil dari Gemini.";
  
                  const sendRes = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      chat_id: process.env.TELEGRAM_CHAT_ID,
                      text: processedText
                    }),
                  });
      
                  if (!sendRes.ok) {
                    const errText = await sendRes.text();
                    throw new Error('Telegram API error chat: ' + errText);
                  }
                  
                  // await fetch(process.env.DISCORD_WEBHOOK_URL, {
                  //  method: 'POST',
                  //  headers: { 'Content-Type': 'application/json' },
                  //  body: JSON.stringify({ content: message }),
                  // });
  
                  lastReleases[repo] = latestTag;
                  console.log(`‚úÖ Webhook dikirim: ${repo} - ${latestTag}`);
                } else {
                  console.log(`‚ÑπÔ∏è Tidak ada release baru untuk ${repo}`);
                }
              } else {
                identifier = latestCommit.data[0].sha
                const originalText = `üì¢ ${latestCommit.data[0]}`.trim();
  
                // Kirim originalText ke Gemini untuk diproses (rapikan / jelaskan)
                const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;
                const geminiBody = {
                  contents: [
                    {
                      parts: [
                        {
                          text: `Rapikan dan tidak perlu menggunakan markdown (jangan gunakan tanda bintang, bold, italic, heading, dsb). Hasil akhir harus berisi:
                  1. Commit terakhir
                  3. Rapikan dan tolong keluarkan hasil dalam format teks polos, tanpa markdown, tanpa tanda *
                  4. Kalo tidak ada informasi kasih tidak ada
                  5. Kalo ketemu prefix convensional commit ganti pake emoji contoh fix: jadi üêõ
                  6. Tambahkan link commit terakhirnya dan repository nya
                  7. Gausah kasih saran apapun, langsung intinya karna ini broadcast
                  8. Repo nya sesuai ${repo}
                  9. Identifier commit nya sesuai ${identifier}
                  
                  Contoh output yang diinginkan:
                  
                  üì¢ Update tersedia untuk JS Framework: *${repo}*
                  
                  Mainteners belum menerbitkan versi release!

                  üìã Catatan Commit:
                  ${releaseBody}
                  
                  üîó Lihat selengkapnya: https://github.com/${repo}/commit/${identifier}:\n\n${originalText}`
                        }
                      ]
                    }
                  ]
                };
  
                const geminiRes = await fetch(geminiUrl, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(geminiBody)
                });
  
                if (!geminiRes.ok) {
                  const geminiErr = await geminiRes.text();
                  throw new Error('Gemini API error: ' + geminiErr);
                }
  
                const geminiData = await geminiRes.json();
  
                // Ambil hasil teks olahan dari Gemini API (sesuaikan struktur response-nya)
                // Saya asumsikan di geminiData.contents[0].parts[0].text
                const processedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || "Maaf, tidak ada hasil dari Gemini.";

                const sendRes = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    message_thread_id: 1352,
                    text: processedText
                  }),
                });
    
                if (!sendRes.ok) {
                  const errText = await sendRes.text();
                  throw new Error('Telegram API error chat: ' + errText);
                }
                
                // await fetch(process.env.DISCORD_WEBHOOK_URL, {
                //  method: 'POST',
                //  headers: { 'Content-Type': 'application/json' },
                //  body: JSON.stringify({ content: message }),
                // });

                lastReleases[repo] = latestTag;
                console.log(`‚úÖ Webhook dikirim: ${repo} - ${latestTag}`);
              }
            } catch (err) {
              console.log(`‚ùå Gagal fetch ${repo}:`, err.message);
            }

            fs.mkdirSync('.github/cache', { recursive: true });
            fs.writeFileSync(filePath, JSON.stringify(lastReleases, null, 2));
