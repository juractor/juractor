name: Send Adonis Ecosystem Release

on:
  schedule:
    - cron: '0 * * * *' # setiap 1 jam
  workflow_dispatch:

jobs:
  check_release:
    runs-on: ubuntu-latest

    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN_ADONIS_ANNOUNCEMENT }}
      TELEGRAM_CHAT_ID: '-1002576241215' # Channel Adonis Enthusiast
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Restore last releases cache
        id: cache
        uses: actions/cache@v4
        with:
          path: .github/cache/last-releases.json
          key: last-releases-cache-v3-${{ github.run_id }}
          restore-keys: |
            last-releases-cache-v3-

      - name: Fetch and notify random repo release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const repos = [
              'adonisjs/lucid',
              'adonisjs/presets',
              'adonisjs/auth',
              'adonisjs/ace',
              'adonisjs/health',
              'adonisjs/core',
              'adonisjs/create-adonisjs',
              'adonisjs/cache',
              'adonisjs/lock',
              'adonisjs/redis',
              'adonisjs/mail',
              'adonisjs/session',
              'adonisjs/limiter',
              'adonisjs/transmit',
              'adonisjs/i18n',
              'adonisjs/drive',
              'adonisjs/eslint-config',
              'adonisjs/eslint-plugin-adonisjs',
              'adonisjs/tsconfig',
              'adonisjs/prettier-config',
              'adonisjs/assembler',
              'adonisjs/hash',
              'japa/create-japa',
              'adonisjs/inertia',
              'japa/snapshot',
              'adonisjs/http-server',
              'adonisjs/bouncer',
              'adonisjs/logger',
              'japa/api-client',
              'adonisjs/fold',
              'vinejs/compiler',
              'vinejs/vine',
              'adonisjs/vite'
            ];

            const filePath = '.github/cache/last-releases.json';
            let lastReleases = {};

            if (fs.existsSync(filePath)) {
              try {
                lastReleases = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
              } catch {
                lastReleases = {};
              }
            }

            // Ambil satu repo secara acak
            const repo = repos[Math.floor(Math.random() * repos.length)];
            const [owner, repoName] = repo.split('/');

            try {
              const latestRelease = await github.rest.repos.getLatestRelease({ owner, repo: repoName });
              const latestTag = latestRelease.data.tag_name;
              const lastTag = lastReleases[repo];
              const releaseBody = latestRelease.data.body || '';

              if (latestTag !== lastTag) {
                const originalText = `üì¢ ${latestRelease.data}`.trim();

                // Kirim originalText ke Gemini untuk diproses (rapikan / jelaskan)
                const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;
                const geminiBody = {
                  contents: [
                    {
                      parts: [
                        {
                          text: `Rapikan dan tidak perlu menggunakan markdown (jangan gunakan tanda bintang, bold, italic, heading, dsb). Hasil akhir harus berisi:
                  1. Fitur yang ditambah
                  2. Bug yang di fix apa
                  3. Rapikan dan tolong keluarkan hasil dalam format teks polos, tanpa markdown, tanpa tanda *
                  4. Kalo tidak ada informasi kasih tidak ada
                  5. Kalo ketemu prefix convensional commit ganti pake emoji contoh fix: jadi üêõ
                  6. Tambahkan link release tag dan repository nya
                  7. Tolong gausah kasih saran apapun, langsung intinya karna ini broadcast
                  
                  Contoh output yang diinginkan:
                  
                  üì¢ Update tersedia untuk *${repo}* ‚Äì versi **${latestTag}** telah dirilis!

                  üìã Catatan Rilis:
                  ${releaseBody}
                  
                  üîó Lihat selengkapnya: https://github.com/${repo}/releases/tag/${latestTag}:\n\n${originalText}`
                        }
                      ]
                    }
                  ]
                };
  
                const geminiRes = await fetch(geminiUrl, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(geminiBody)
                });
  
                if (!geminiRes.ok) {
                  const geminiErr = await geminiRes.text();
                  throw new Error('Gemini API error: ' + geminiErr);
                }
  
                const geminiData = await geminiRes.json();
  
                // Ambil hasil teks olahan dari Gemini API (sesuaikan struktur response-nya)
                // Saya asumsikan di geminiData.contents[0].parts[0].text
                const processedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || "Maaf, tidak ada hasil dari Gemini.";

                const sendRes = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: processedText
                  }),
                });
    
                if (!sendRes.ok) {
                  const errText = await sendRes.text();
                  throw new Error('Telegram API error chat: ' + errText);
                }
                
                // await fetch(process.env.DISCORD_WEBHOOK_URL, {
                //  method: 'POST',
                //  headers: { 'Content-Type': 'application/json' },
                //  body: JSON.stringify({ content: message }),
                // });

                lastReleases[repo] = latestTag;
                console.log(`‚úÖ Webhook dikirim: ${repo} - ${latestTag}`);
              } else {
                console.log(`‚ÑπÔ∏è Tidak ada release baru untuk ${repo}`);
              }
            } catch (err) {
              console.log(`‚ùå Gagal fetch ${repo}:`, err.message);
            }

            fs.mkdirSync('.github/cache', { recursive: true });
            fs.writeFileSync(filePath, JSON.stringify(lastReleases, null, 2));
