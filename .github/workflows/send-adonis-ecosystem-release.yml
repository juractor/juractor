name: Send Adonis Ecosystem Release

on:
  schedule:
    - cron: '0 * * * *' # setiap 1 jam
  workflow_dispatch:

jobs:
  check_release:
    runs-on: ubuntu-latest

    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN_ADONIS_ANNOUNCEMENT }}
      TELEGRAM_CHAT_ID: '-1002576241215' # Channel Adonis Enthusiast
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Restore last releases cache
        id: cache
        uses: actions/cache@v4
        with:
          path: .github/cache/last-releases.json
          key: last-releases-cache-v3-${{ github.run_id }}
          restore-keys: |
            last-releases-cache-v3-

      - name: Fetch and notify random repo release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            const repos = [
              // Adonis 6 Official Package
              'adonisjs/lucid',
              'adonisjs/presets',
              'adonisjs/auth',
              'adonisjs/health',
              'adonisjs/core',
              'adonisjs/cache',
              'adonisjs/lock',
              'adonisjs/redis',
              'adonisjs/mail',
              'adonisjs/session',
              'adonisjs/limiter',
              'adonisjs/transmit',
              'adonisjs/i18n',
              'adonisjs/drive',
              'adonisjs/eslint-plugin-adonisjs',
              'adonisjs/prettier-config',
              'adonisjs/inertia',
              'japa/snapshot',
              'adonisjs/bouncer',
              'japa/api-client',
              'vinejs/vine',
              'adonisjs/vite',
              'japa/browser-client',
              'japa/expect-type',
              'japa/file-system',
              'adonisjs/lucid-slugify',
              'adonisjs/shield',
              'adonisjs/ally',
              'edge-js/edge-iconify',
              'edge-js/edge-vscode',
              'Julien-R44/adonis-vscode-extension',
              
              // Adonis 6 Community Package
              'acidiney/bull-queue',
              'nulix-dev/adonis-2fa',
              'WailRoth/adonis-ally-apple-v6',
              'batosai/adonis-attachment',
              'StouderIO/adonis-auditing',
              'Artian-Techs/adonis-breadcrumbs',
              '7nohe/adonis-bullet',
              'monojson/adonis-captcha-guard',
              'adityadarma/adonis-datatables',
              'adityadarma/adonis-logger-slack',
              'StouderIO/adonis-translatable',
              'batosai/adonis-unpoly',
              'CodeSyncr/adonisjs-whatsapp',
              'dmitry-makovsky/adonis6_ally_vk',
              'dmitry-makovsky/adonis6_ally_yandex',
              'mdsadique-inam/adonisjs-2fa',
              'holoyan/adonisjs-activitylog',
              'sooluh/adonisjs-grammy',
              'KABBOUCHI/adonisjs-jobs',
              'MaximeMRF/adonisjs-jwt',
              'holoyan/adonisjs-permissions',
              'KABBOUCHI/adonisjs-scheduler',
              'KABBOUCHI/adonisjs-websocket',
              'sooluh/adonisjs-whatsapp',
              'macieklad/adonisjsx',
              'craftnotion/adonis-advance-redis-rpc',
              'tom-laplace/ally-blizzard',
              'monojson/adonis-ally-tiktok',
              'shiny/adonis-clickhouse',
              'batosai/edge-components',
              'necessarylion/flydrive-azure-driver',
              'FriendsOfAdonis/FriendsOfAdonis',
              'StouderIO/adonis-geolite2',
              'softwarecitadel/adonisjs-girouette',
              'izzyjs/route',
              'adonisjs/lock',
              'lookinlab/adonis-lucid-filter',
              'lookinlab/adonis-lucid-soft-deletes',
              'MichaelBelgium/adonisjs-maintenance',
              'Julien-R44/adonis5-prometheus',
              'mvargaslandolfi1993/rabbitmq-adonis-v6',
              'jarle/remix-adonisjs',
              'shiny/adonis-resque',
              '@rlanz/ally-twitch',
              'RomainLanz/adonis-bull-queue',
              '@rlanz/sentry',
              'Julien-R44/adonis-sail',
              'ThibaultPointurier/ally-microsoft',
              'Julien-R44/tuyau',
              'vittoriobusatta/adonis-stripe',
            ];

            const filePath = '.github/cache/last-releases.json';
            let lastReleases = {};

            if (fs.existsSync(filePath)) {
              try {
                lastReleases = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
              } catch {
                lastReleases = {};
              }
            }

            // Ambil satu repo secara acak
            const repo = repos[Math.floor(Math.random() * repos.length)];
            const [owner, repoName] = 'dmitry-makovsky/adonis6_ally_yandex'.split('/');

            try {
              let latestCommit = ''
              let latestTag = null;
              let latestRelease = null;
              let releaseBody = '';
              let isTagFromCommit = false;

              try {
                latestRelease = await github.rest.repos.getLatestRelease({ owner, repo: repoName });
                latestTag = latestRelease.data.tag_name;
                releaseBody = latestRelease.data.body || '';
              } catch (err) {
                latestCommit = await github.rest.repos.listCommits({ owner, repo: repoName, per_page: 1 });
                latestTag = latestCommit.data[0].sha.substring(0, 7);
                releaseBody = latestCommit.data[0].commit.message;
                isTagFromCommit = true;
              }
              
              if (latestRelease) {
                const lastTag = lastReleases[repo];

                if (latestTag !== lastTag) {
                  const originalText = `üì¢ ${latestRelease.data}`.trim();
  
                  // Kirim originalText ke Gemini untuk diproses (rapikan / jelaskan)
                  const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;
                  const geminiBody = {
                    contents: [
                      {
                        parts: [
                          {
                            text: `Rapikan dan tidak perlu menggunakan markdown (jangan gunakan tanda bintang, bold, italic, heading, dsb). Hasil akhir harus berisi:
                    1. Fitur yang ditambah
                    2. Bug yang di fix apa
                    3. Rapikan dan tolong keluarkan hasil dalam format teks polos, tanpa markdown, tanpa tanda *
                    4. Kalo tidak ada informasi kasih tidak ada
                    5. Kalo ketemu prefix convensional commit ganti pake emoji contoh fix: jadi üêõ
                    6. Tambahkan link release tag dan repository nya
                    7. Tolong gausah kasih saran apapun, langsung intinya karna ini broadcast
                    
                    Contoh output yang diinginkan:
                    
                    üì¢ Update tersedia untuk *${repo}* ‚Äì versi **${latestTag}** telah dirilis!
  
                    üìã Catatan Rilis:
                    ${releaseBody}
                    
                    üîó Lihat selengkapnya: https://github.com/${repo}/releases/tag/${latestTag}:\n\n${originalText}`
                          }
                        ]
                      }
                    ]
                  };
    
                  const geminiRes = await fetch(geminiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(geminiBody)
                  });
    
                  if (!geminiRes.ok) {
                    const geminiErr = await geminiRes.text();
                    throw new Error('Gemini API error: ' + geminiErr);
                  }
    
                  const geminiData = await geminiRes.json();
    
                  // Ambil hasil teks olahan dari Gemini API (sesuaikan struktur response-nya)
                  // Saya asumsikan di geminiData.contents[0].parts[0].text
                  const processedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || "Maaf, tidak ada hasil dari Gemini.";
  
                  const sendRes = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                      chat_id: process.env.TELEGRAM_CHAT_ID,
                      text: processedText
                    }),
                  });
      
                  if (!sendRes.ok) {
                    const errText = await sendRes.text();
                    throw new Error('Telegram API error chat: ' + errText);
                  }
                  
                  // await fetch(process.env.DISCORD_WEBHOOK_URL, {
                  //  method: 'POST',
                  //  headers: { 'Content-Type': 'application/json' },
                  //  body: JSON.stringify({ content: message }),
                  // });
  
                  lastReleases[repo] = latestTag;
                  console.log(`‚úÖ Webhook dikirim: ${repo} - ${latestTag}`);
                } else {
                  console.log(`‚ÑπÔ∏è Tidak ada release baru untuk ${repo}`);
                }
              } else {
                const commit = latestCommit.data[0].commit;
                identifier = latestCommit.data[0].sha
                const originalText = `üì¢ ${latestCommit.data[0]}`.trim();
  
                // Kirim originalText ke Gemini untuk diproses (rapikan / jelaskan)
                const geminiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;
                const geminiBody = {
                  contents: [
                    {
                      parts: [
                        {
                          text: `Rapikan dan tidak perlu menggunakan markdown (jangan gunakan tanda bintang, bold, italic, heading, dsb). Hasil akhir harus berisi:
                  1. Commit terakhir
                  3. Rapikan dan tolong keluarkan hasil dalam format teks polos, tanpa markdown, tanpa tanda *
                  4. Kalo tidak ada informasi kasih tidak ada
                  5. Kalo ketemu prefix convensional commit ganti pake emoji contoh fix: jadi üêõ
                  6. Tambahkan link commit terakhirnya dan repository nya
                  7. Tolong gausah kasih saran apapun, langsung intinya karna ini broadcast
                  
                  Contoh output yang diinginkan:
                  
                  üì¢ Update tersedia untuk *${repo}* ‚Äì mainteners belum menerbitkan versi release!

                  üìã Catatan Commit:
                  ${commit.message}
                  
                  üîó Lihat selengkapnya: https://github.com/${repo}/commit/${identifier}:\n\n${originalText}`
                        }
                      ]
                    }
                  ]
                };
  
                const geminiRes = await fetch(geminiUrl, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(geminiBody)
                });
  
                if (!geminiRes.ok) {
                  const geminiErr = await geminiRes.text();
                  throw new Error('Gemini API error: ' + geminiErr);
                }
  
                const geminiData = await geminiRes.json();
  
                // Ambil hasil teks olahan dari Gemini API (sesuaikan struktur response-nya)
                // Saya asumsikan di geminiData.contents[0].parts[0].text
                const processedText = geminiData.candidates?.[0]?.content?.parts?.[0]?.text || "Maaf, tidak ada hasil dari Gemini.";

                const sendRes = await fetch(`https://api.telegram.org/bot${process.env.TELEGRAM_TOKEN}/sendMessage`, {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({
                    chat_id: process.env.TELEGRAM_CHAT_ID,
                    text: processedText
                  }),
                });
    
                if (!sendRes.ok) {
                  const errText = await sendRes.text();
                  throw new Error('Telegram API error chat: ' + errText);
                }
                
                // await fetch(process.env.DISCORD_WEBHOOK_URL, {
                //  method: 'POST',
                //  headers: { 'Content-Type': 'application/json' },
                //  body: JSON.stringify({ content: message }),
                // });

                lastReleases[repo] = latestTag;
                console.log(`‚úÖ Webhook dikirim: ${repo} - ${latestTag}`);
              }
            } catch (err) {
              console.log(`‚ùå Gagal fetch ${repo}:`, err.message);
            }

            fs.mkdirSync('.github/cache', { recursive: true });
            fs.writeFileSync(filePath, JSON.stringify(lastReleases, null, 2));
